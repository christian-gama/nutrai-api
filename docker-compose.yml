version: '3.9'
services:
  # Database service to run both in development and production. The variables
  # are configured in .env.$APP_ENV and it will run according to the variables
  # you set there.
  psql:
    container_name: nutrai-psql
    image: postgres:15.2-alpine
    restart: "no"
    command: -p $DB_PORT
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME" ]
      interval: 1s
      timeout: 1s
      retries: 10
    environment:
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASSWORD
      - POSTGRES_DB=$DB_NAME
      - POSTGRES_PORT=$DB_PORT
    volumes:
      - ./.generated/db_data/$APP_ENV:/var/lib/postgresql/data
    ports:
      - "$DB_PORT:$DB_PORT"

  rabbitmq:
    container_name: nutrai-rabbitmq
    image: rabbitmq:3.11.8-alpine
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 1s
      timeout: 1s
      retries: 10
    environment:
      - RABBITMQ_DEFAULT_USER=$RABBITMQ_USER
      - RABBITMQ_DEFAULT_PASS=$RABBITMQ_PASSWORD
      - RABBITMQ_NODE_PORT=$RABBITMQ_PORT
    ports:
      - "$RABBITMQ_PORT:$RABBITMQ_PORT"

  # Service to run both in development and production. The variables are
  # configured in .env.$APP_ENV and it will run according to the variables
  # you set there.
  api:
    container_name: nutrai-api
    restart: always
    command: sh -c "make run ENV_FILE=.env.$APP_ENV"
    build:
      context: .
      target: api
      dockerfile: Dockerfile
      args:
        - WORKDIR=$WORKDIR
        - ARCH=${ARCH:-amd64}
        - AIRVERSION=$AIRVERSION
    ports:
      - "$APP_PORT:$APP_PORT"
    env_file:
      - .env.$APP_ENV
    depends_on:
      - psql
    links:
      - psql
    volumes:
      - ./.cache/go:/root/.cache
      - ./.generated/build:$WORKDIR/.generated/build
      - ./.generated/coverage:$WORKDIR/.generated/coverage
      - ./cmd:$WORKDIR/cmd
      - ./internal:$WORKDIR/internal
      - ./testutils:$WORKDIR/testutils
    environment:
      - RUNNING_IN_DOCKER=true

  # Optimized for running tests. Do not use for development. It will run the 
  # database in a tmpfs, so it will not persist data. Besides that, it will
  # disable fsync, full_page_writes and synchronous_commit, so it will be much
  # faster, but it will not be safe for production.
  psql_test:
    container_name: nutrai-psql-test
    image: postgres:15.2-alpine
    restart: always
    command: -c fsync=off -c full_page_writes=off -c synchronous_commit=off -p $DB_PORT
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME" ]
      interval: 1s
      timeout: 1s
      retries: 10
    ports:
      - "$DB_PORT:$DB_PORT"
    environment:
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASSWORD
      - POSTGRES_DB=$DB_NAME
      - POSTGRES_HOST=$DB_HOST
      - POSTGRES_PORT=$DB_PORT
    tmpfs:
      - /var/lib/postgresql/data

  rabbitmq_test:
    container_name: nutrai-rabbitmq-test
    image: rabbitmq:3.11.8-alpine
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 1s
      timeout: 1s
      retries: 10
    environment:
      - RABBITMQ_DEFAULT_USER=$RABBITMQ_USER
      - RABBITMQ_DEFAULT_PASS=$RABBITMQ_PASSWORD
      - RABBITMQ_NODE_PORT=$RABBITMQ_PORT
    ports:
      - "$RABBITMQ_PORT:$RABBITMQ_PORT"
    tmpfs:
      - /var/lib/rabbitmq
