version: '3.9'
services:
  # Database service to run both in development and production. The variables
  # are configured in .env.$APP_ENV and it will run according to the variables
  # you set there.
  psql:
    command: -p $DB_PORT
    container_name: nutrai-psql
    image: postgres:15.2-alpine
    restart: "no"
    healthcheck:
      interval: 1s
      retries: 10
      test: [ "CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME" ]
      timeout: 1s
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_PORT: $DB_PORT
      POSTGRES_USER: $DB_USER
      POSTGRES_MAX_CONNECTIONS: $DB_MAX_OPEN_CONNS
    volumes:
      - ./$DOCKER_DIR/db_data/$APP_ENV:/var/lib/postgresql/data
    ports:
      - "$DB_PORT:$DB_PORT"

  # Redis service to run both in development and production. The variables
  # are configured in .env.$APP_ENV and it will run according to the variables
  redis:
    command: redis-server --port $REDIS_PORT
    container_name: nutrai-redis
    image: redis:7.0.11-alpine
    restart: always
    healthcheck:
      interval: 1s
      retries: 10
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: 1s
    environment:
      REDIS_PASSWORD: $REDIS_PASSWORD
      REDIS_PORT: $REDIS_PORT
    volumes:
      - ./$DOCKER_DIR/redis_data/$APP_ENV:/data
    ports:
      - "$REDIS_PORT:$REDIS_PORT"

  # RabbitMQ service to run both in development and production. The variables
  # are configured in .env.$APP_ENV and it will run according to the variables
  # you set there.
  rabbitmq:
    container_name: nutrai-rabbitmq
    image: rabbitmq:3.11.8-alpine
    restart: always
    healthcheck:
      interval: 1s
      retries: 10
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      timeout: 1s
    environment:
      RABBITMQ_DEFAULT_PASS: $RABBITMQ_PASSWORD
      RABBITMQ_DEFAULT_USER: $RABBITMQ_USER
      RABBITMQ_NODE_PORT: $RABBITMQ_PORT
    volumes:
      - ./$DOCKER_DIR/rabbitmq_data/$APP_ENV:/var/lib/rabbitmq
    ports:
      - "$RABBITMQ_PORT:$RABBITMQ_PORT"

  # Service to run both in development and production. The variables are
  # configured in .env.$APP_ENV and it will run according to the variables
  # you set there.
  api:
    command: sh -c "make run ENV_FILE=.env.$APP_ENV"
    container_name: nutrai-api
    restart: always
    build:
      context: .
      target: ${APP_ENV}
      dockerfile: Dockerfile
      args:
        AIRVERSION: $AIRVERSION
        WORKDIR: $WORKDIR
    environment:
      RUNNING_IN_DOCKER: true
    ports:
      - "$APP_PORT:$APP_PORT"
    env_file:
      - .env.$APP_ENV
    depends_on:
      - psql
      - rabbitmq
      - redis
    links:
      - psql
      - rabbitmq
      - redis
    volumes:
      - ./$DOCKER_DIR/build:$WORKDIR/$BUILD_DIR
      - ./$DOCKER_DIR/cache/go:/root/.cache
      - ./$DOCKER_DIR/tmp:$WORKDIR/tmp
      - ./cmd:$WORKDIR/cmd
      - ./config:$WORKDIR/config
      - ./internal:$WORKDIR/internal
      - ./pkg:$WORKDIR/pkg
      - ./scripts:$WORKDIR/scripts
      - ./testutils:$WORKDIR/testutils
      - ./vendor:$WORKDIR/vendor
      - ./go.mod:$WORKDIR/go.mod
      - ./go.sum:$WORKDIR/go.sum
      - ./Makefile:$WORKDIR/Makefile

  # Optimized for running tests. Do not use for development. It will run the 
  # database in a tmpfs, so it will not persist data. Besides that, it will
  # disable fsync, full_page_writes and synchronous_commit, so it will be much
  # faster, but it will not be safe for production.
  psql_test:
    command: -c fsync=off -c full_page_writes=off -c synchronous_commit=off -p $DB_PORT
    container_name: nutrai-psql-test
    image: postgres:15.2-alpine
    restart: always
    healthcheck:
      interval: 1s
      retries: 10
      test: [ "CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME" ]
      timeout: 1s
    ports:
      - "$DB_PORT:$DB_PORT"
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_PORT: $DB_PORT
      POSTGRES_USER: $DB_USER
      POSTGRES_MAX_CONNECTIONS: $DB_MAX_OPEN_CONNS
    tmpfs:
      - /var/lib/postgresql/data

  # Optimized for running tests. Do not use for development. It will run the
  # rabbitmq in a tmpfs, so it will not persist data.
  rabbitmq_test:
    container_name: nutrai-rabbitmq-test
    image: rabbitmq:3.11.8-alpine
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 1s
      timeout: 1s
      retries: 10
    environment:
      RABBITMQ_DEFAULT_PASS: $RABBITMQ_PASSWORD
      RABBITMQ_DEFAULT_USER: $RABBITMQ_USER
      RABBITMQ_NODE_PORT: $RABBITMQ_PORT
    ports:
      - "$RABBITMQ_PORT:$RABBITMQ_PORT"
    tmpfs:
      - /var/lib/rabbitmq

  # Optimized for running tests. Do not use for development.
  redis_test:
    command: redis-server --port $REDIS_PORT
    container_name: nutrai-redis-test
    image: redis:7.0.11-alpine
    restart: always
    healthcheck:
      interval: 1s
      retries: 10
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: 1s
    environment:
      REDIS_PASSWORD: $REDIS_PASSWORD
      REDIS_PORT: $REDIS_PORT
    ports:
      - "$REDIS_PORT:$REDIS_PORT"
