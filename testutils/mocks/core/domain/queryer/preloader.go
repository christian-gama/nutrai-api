// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	queryer "github.com/christian-gama/nutrai-api/internal/core/domain/queryer"
	mock "github.com/stretchr/testify/mock"
)

// Preloader is an autogenerated mock type for the Preloader type
type Preloader struct {
	mock.Mock
}

// Add provides a mock function with given fields: field
func (_m *Preloader) Add(field string) queryer.Preloader {
	ret := _m.Called(field)

	var r0 queryer.Preloader
	if rf, ok := ret.Get(0).(func(string) queryer.Preloader); ok {
		r0 = rf(field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queryer.Preloader)
		}
	}

	return r0
}

// Slice provides a mock function with given fields:
func (_m *Preloader) Slice() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

type mockConstructorTestingTNewPreloader interface {
	mock.TestingT
	Cleanup(func())
}

// NewPreloader creates a new instance of Preloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPreloader(t mockConstructorTestingTNewPreloader) *Preloader {
	mock := &Preloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
