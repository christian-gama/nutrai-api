// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler[Input interface{}, Output interface{}] struct {
	mock.Mock
}

// Handle provides a mock function with given fields: ctx, input
func (_m *Handler[Input, Output]) Handle(ctx context.Context, input Input) (Output, error) {
	ret := _m.Called(ctx, input)

	var r0 Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Input) (Output, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Input) Output); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(Output)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Input) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandler[Input interface{}, Output interface{}](t mockConstructorTestingTNewHandler) *Handler[Input, Output] {
	mock := &Handler[Input, Output]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
