// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	event "github.com/christian-gama/nutrai-api/internal/core/domain/event"
	mock "github.com/stretchr/testify/mock"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

// Action provides a mock function with given fields:
func (_m *Event) Action() event.Action {
	ret := _m.Called()

	var r0 event.Action
	if rf, ok := ret.Get(0).(func() event.Action); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(event.Action)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Event) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *Event) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewEvent interface {
	mock.TestingT
	Cleanup(func())
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEvent(t mockConstructorTestingTNewEvent) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
