// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	diet "github.com/christian-gama/nutrai-api/internal/diet/domain/model/diet"
	mock "github.com/stretchr/testify/mock"

	querying "github.com/christian-gama/nutrai-api/internal/shared/domain/querying"

	repo "github.com/christian-gama/nutrai-api/internal/diet/domain/repo"
)

// Diet is an autogenerated mock type for the Diet type
type Diet struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, input, preload
func (_m *Diet) All(ctx context.Context, input repo.AllDietsInput, preload ...string) (*querying.PaginationOutput[*diet.Diet], error) {
	_va := make([]interface{}, len(preload))
	for _i := range preload {
		_va[_i] = preload[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *querying.PaginationOutput[*diet.Diet]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.AllDietsInput, ...string) (*querying.PaginationOutput[*diet.Diet], error)); ok {
		return rf(ctx, input, preload...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.AllDietsInput, ...string) *querying.PaginationOutput[*diet.Diet]); ok {
		r0 = rf(ctx, input, preload...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querying.PaginationOutput[*diet.Diet])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.AllDietsInput, ...string) error); ok {
		r1 = rf(ctx, input, preload...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, input
func (_m *Diet) Delete(ctx context.Context, input repo.DeleteDietInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.DeleteDietInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, input, preload
func (_m *Diet) Find(ctx context.Context, input repo.FindDietInput, preload ...string) (*diet.Diet, error) {
	_va := make([]interface{}, len(preload))
	for _i := range preload {
		_va[_i] = preload[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *diet.Diet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindDietInput, ...string) (*diet.Diet, error)); ok {
		return rf(ctx, input, preload...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindDietInput, ...string) *diet.Diet); ok {
		r0 = rf(ctx, input, preload...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diet.Diet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.FindDietInput, ...string) error); ok {
		r1 = rf(ctx, input, preload...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, input
func (_m *Diet) Save(ctx context.Context, input repo.SaveDietInput) (*diet.Diet, error) {
	ret := _m.Called(ctx, input)

	var r0 *diet.Diet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.SaveDietInput) (*diet.Diet, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.SaveDietInput) *diet.Diet); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diet.Diet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.SaveDietInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, input
func (_m *Diet) Update(ctx context.Context, input repo.UpdateDietInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.UpdateDietInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDiet interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiet creates a new instance of Diet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiet(t mockConstructorTestingTNewDiet) *Diet {
	mock := &Diet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
