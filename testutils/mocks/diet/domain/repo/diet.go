// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	diet "github.com/christian-gama/nutrai-api/internal/diet/domain/model/diet"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/christian-gama/nutrai-api/internal/diet/domain/repo"

	value "github.com/christian-gama/nutrai-api/internal/shared/domain/value"
)

// Diet is an autogenerated mock type for the Diet type
type Diet struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, input
func (_m *Diet) All(ctx context.Context, input repo.AllDietInput) ([]*diet.Diet, error) {
	ret := _m.Called(ctx, input)

	var r0 []*diet.Diet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.AllDietInput) ([]*diet.Diet, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.AllDietInput) []*diet.Diet); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*diet.Diet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.AllDietInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, input
func (_m *Diet) Delete(ctx context.Context, input repo.DeleteDietInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.DeleteDietInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, input
func (_m *Diet) Find(ctx context.Context, input repo.FindDietInput) (*diet.Diet, error) {
	ret := _m.Called(ctx, input)

	var r0 *diet.Diet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindDietInput) (*diet.Diet, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindDietInput) *diet.Diet); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diet.Diet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.FindDietInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, input
func (_m *Diet) Save(ctx context.Context, input repo.SaveDietInput) (value.ID, error) {
	ret := _m.Called(ctx, input)

	var r0 value.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.SaveDietInput) (value.ID, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.SaveDietInput) value.ID); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(value.ID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.SaveDietInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, input
func (_m *Diet) Update(ctx context.Context, input repo.UpdateDietInput) (value.ID, error) {
	ret := _m.Called(ctx, input)

	var r0 value.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.UpdateDietInput) (value.ID, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.UpdateDietInput) value.ID); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(value.ID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.UpdateDietInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDiet interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiet creates a new instance of Diet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiet(t mockConstructorTestingTNewDiet) *Diet {
	mock := &Diet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
