// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	plan "github.com/christian-gama/nutrai-api/internal/diet/domain/model/plan"
	mock "github.com/stretchr/testify/mock"

	queryer "github.com/christian-gama/nutrai-api/internal/core/domain/queryer"

	repo "github.com/christian-gama/nutrai-api/internal/diet/domain/repo"
)

// Plan is an autogenerated mock type for the Plan type
type Plan struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, input
func (_m *Plan) All(ctx context.Context, input repo.AllPlansInput) (*queryer.PaginationOutput[*plan.Plan], error) {
	ret := _m.Called(ctx, input)

	var r0 *queryer.PaginationOutput[*plan.Plan]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.AllPlansInput) (*queryer.PaginationOutput[*plan.Plan], error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.AllPlansInput) *queryer.PaginationOutput[*plan.Plan]); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queryer.PaginationOutput[*plan.Plan])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.AllPlansInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, input
func (_m *Plan) Delete(ctx context.Context, input repo.DeletePlanInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.DeletePlanInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, input
func (_m *Plan) Find(ctx context.Context, input repo.FindPlanInput) (*plan.Plan, error) {
	ret := _m.Called(ctx, input)

	var r0 *plan.Plan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindPlanInput) (*plan.Plan, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindPlanInput) *plan.Plan); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plan.Plan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.FindPlanInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, input
func (_m *Plan) Save(ctx context.Context, input repo.SavePlanInput) (*plan.Plan, error) {
	ret := _m.Called(ctx, input)

	var r0 *plan.Plan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.SavePlanInput) (*plan.Plan, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.SavePlanInput) *plan.Plan); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plan.Plan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.SavePlanInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, input
func (_m *Plan) Update(ctx context.Context, input repo.UpdatePlanInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.UpdatePlanInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPlan interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlan creates a new instance of Plan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlan(t mockConstructorTestingTNewPlan) *Plan {
	mock := &Plan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
