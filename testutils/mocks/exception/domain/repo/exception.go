// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	exception "github.com/christian-gama/nutrai-api/internal/exception/domain/model/exception"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/christian-gama/nutrai-api/internal/exception/domain/repo"
)

// Exception is an autogenerated mock type for the Exception type
type Exception struct {
	mock.Mock
}

// DeleteOld provides a mock function with given fields: ctx, input
func (_m *Exception) DeleteOld(ctx context.Context, input repo.DeleteOldExceptionInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.DeleteOldExceptionInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, input
func (_m *Exception) Save(ctx context.Context, input repo.SaveExceptionInput) (*exception.Exception, error) {
	ret := _m.Called(ctx, input)

	var r0 *exception.Exception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.SaveExceptionInput) (*exception.Exception, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.SaveExceptionInput) *exception.Exception); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exception.Exception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.SaveExceptionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewException interface {
	mock.TestingT
	Cleanup(func())
}

// NewException creates a new instance of Exception. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewException(t mockConstructorTestingTNewException) *Exception {
	mock := &Exception{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
