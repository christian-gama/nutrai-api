// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/christian-gama/nutrai-api/internal/auth/domain/repo"
	mock "github.com/stretchr/testify/mock"

	token "github.com/christian-gama/nutrai-api/internal/auth/domain/model/token"
)

// Token is an autogenerated mock type for the Token type
type Token struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, input
func (_m *Token) Delete(ctx context.Context, input repo.DeleteTokenInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.DeleteTokenInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAll provides a mock function with given fields: ctx, input
func (_m *Token) DeleteAll(ctx context.Context, input repo.DeleteAllTokenInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.DeleteAllTokenInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, input
func (_m *Token) Find(ctx context.Context, input repo.FindTokenInput) (*token.Token, error) {
	ret := _m.Called(ctx, input)

	var r0 *token.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindTokenInput) (*token.Token, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindTokenInput) *token.Token); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.FindTokenInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, input
func (_m *Token) Save(ctx context.Context, input repo.SaveTokenInput) (*token.Token, error) {
	ret := _m.Called(ctx, input)

	var r0 *token.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.SaveTokenInput) (*token.Token, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.SaveTokenInput) *token.Token); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.SaveTokenInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewToken interface {
	mock.TestingT
	Cleanup(func())
}

// NewToken creates a new instance of Token. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewToken(t mockConstructorTestingTNewToken) *Token {
	mock := &Token{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
