// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	querying "github.com/christian-gama/nutrai-api/internal/shared/domain/querying"
	mock "github.com/stretchr/testify/mock"
)

// Paginator is an autogenerated mock type for the Paginator type
type Paginator struct {
	mock.Mock
}

// GetLimit provides a mock function with given fields:
func (_m *Paginator) GetLimit() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetOffset provides a mock function with given fields:
func (_m *Paginator) GetOffset() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetPage provides a mock function with given fields:
func (_m *Paginator) GetPage() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SetLimit provides a mock function with given fields: limit
func (_m *Paginator) SetLimit(limit int) querying.Paginator {
	ret := _m.Called(limit)

	var r0 querying.Paginator
	if rf, ok := ret.Get(0).(func(int) querying.Paginator); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(querying.Paginator)
		}
	}

	return r0
}

// SetPage provides a mock function with given fields: page
func (_m *Paginator) SetPage(page int) querying.Paginator {
	ret := _m.Called(page)

	var r0 querying.Paginator
	if rf, ok := ret.Get(0).(func(int) querying.Paginator); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(querying.Paginator)
		}
	}

	return r0
}

type mockConstructorTestingTNewPaginator interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaginator creates a new instance of Paginator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaginator(t mockConstructorTestingTNewPaginator) *Paginator {
	mock := &Paginator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
