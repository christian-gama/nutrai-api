// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	manager "github.com/christian-gama/nutrai-api/internal/shared/infra/manager"
	mock "github.com/stretchr/testify/mock"

	querying "github.com/christian-gama/nutrai-api/internal/shared/domain/querying"
)

// All is an autogenerated mock type for the All type
type All[Model interface{}] struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, input
func (_m *All[Model]) All(ctx context.Context, input manager.AllInput[Model]) (*querying.PaginationOutput[*Model], error) {
	ret := _m.Called(ctx, input)

	var r0 *querying.PaginationOutput[*Model]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, manager.AllInput[Model]) (*querying.PaginationOutput[*Model], error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, manager.AllInput[Model]) *querying.PaginationOutput[*Model]); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querying.PaginationOutput[*Model])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, manager.AllInput[Model]) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAll interface {
	mock.TestingT
	Cleanup(func())
}

// NewAll creates a new instance of All. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAll[Model interface{}](t mockConstructorTestingTNewAll) *All[Model] {
	mock := &All[Model]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
