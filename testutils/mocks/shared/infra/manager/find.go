// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	manager "github.com/christian-gama/nutrai-api/internal/shared/infra/manager"
	mock "github.com/stretchr/testify/mock"
)

// Find is an autogenerated mock type for the Find type
type Find[Model interface{}] struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, input, preload
func (_m *Find[Model]) Find(ctx context.Context, input manager.FindInput[Model], preload ...string) (*Model, error) {
	_va := make([]interface{}, len(preload))
	for _i := range preload {
		_va[_i] = preload[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, manager.FindInput[Model], ...string) (*Model, error)); ok {
		return rf(ctx, input, preload...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, manager.FindInput[Model], ...string) *Model); ok {
		r0 = rf(ctx, input, preload...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, manager.FindInput[Model], ...string) error); ok {
		r1 = rf(ctx, input, preload...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFind interface {
	mock.TestingT
	Cleanup(func())
}

// NewFind creates a new instance of Find. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFind[Model interface{}](t mockConstructorTestingTNewFind) *Find[Model] {
	mock := &Find[Model]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
