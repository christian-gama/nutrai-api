// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	manager "github.com/christian-gama/nutrai-api/internal/shared/infra/manager"
	mock "github.com/stretchr/testify/mock"

	querying "github.com/christian-gama/nutrai-api/internal/shared/domain/querying"
)

// Repository is an autogenerated mock type for the Repository type
type Repository[Model interface{}] struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, input, preload
func (_m *Repository[Model]) All(ctx context.Context, input manager.AllInput[Model], preload ...string) (*querying.PaginationOutput[*Model], error) {
	_va := make([]interface{}, len(preload))
	for _i := range preload {
		_va[_i] = preload[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *querying.PaginationOutput[*Model]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, manager.AllInput[Model], ...string) (*querying.PaginationOutput[*Model], error)); ok {
		return rf(ctx, input, preload...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, manager.AllInput[Model], ...string) *querying.PaginationOutput[*Model]); ok {
		r0 = rf(ctx, input, preload...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querying.PaginationOutput[*Model])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, manager.AllInput[Model], ...string) error); ok {
		r1 = rf(ctx, input, preload...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, input
func (_m *Repository[Model]) Delete(ctx context.Context, input manager.DeleteInput[Model]) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, manager.DeleteInput[Model]) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, input, preload
func (_m *Repository[Model]) Find(ctx context.Context, input manager.FindInput[Model], preload ...string) (*Model, error) {
	_va := make([]interface{}, len(preload))
	for _i := range preload {
		_va[_i] = preload[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, manager.FindInput[Model], ...string) (*Model, error)); ok {
		return rf(ctx, input, preload...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, manager.FindInput[Model], ...string) *Model); ok {
		r0 = rf(ctx, input, preload...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, manager.FindInput[Model], ...string) error); ok {
		r1 = rf(ctx, input, preload...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, input
func (_m *Repository[Model]) Save(ctx context.Context, input manager.SaveInput[Model]) (*Model, error) {
	ret := _m.Called(ctx, input)

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, manager.SaveInput[Model]) (*Model, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, manager.SaveInput[Model]) *Model); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, manager.SaveInput[Model]) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, input
func (_m *Repository[Model]) Update(ctx context.Context, input manager.UpdateInput[Model]) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, manager.UpdateInput[Model]) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository[Model interface{}](t mockConstructorTestingTNewRepository) *Repository[Model] {
	mock := &Repository[Model]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
