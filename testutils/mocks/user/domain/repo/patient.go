// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	querying "github.com/christian-gama/nutrai-api/internal/shared/domain/querying"
	patient "github.com/christian-gama/nutrai-api/internal/user/domain/model/patient"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/christian-gama/nutrai-api/internal/user/domain/repo"

	value "github.com/christian-gama/nutrai-api/internal/shared/domain/value"
)

// Patient is an autogenerated mock type for the Patient type
type Patient struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, input, preload
func (_m *Patient) All(ctx context.Context, input repo.AllPatientsInput, preload ...string) (*querying.PaginationOutput[*patient.Patient], error) {
	_va := make([]interface{}, len(preload))
	for _i := range preload {
		_va[_i] = preload[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *querying.PaginationOutput[*patient.Patient]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.AllPatientsInput, ...string) (*querying.PaginationOutput[*patient.Patient], error)); ok {
		return rf(ctx, input, preload...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.AllPatientsInput, ...string) *querying.PaginationOutput[*patient.Patient]); ok {
		r0 = rf(ctx, input, preload...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querying.PaginationOutput[*patient.Patient])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.AllPatientsInput, ...string) error); ok {
		r1 = rf(ctx, input, preload...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, input
func (_m *Patient) Delete(ctx context.Context, input repo.DeletePatientInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.DeletePatientInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, input, preload
func (_m *Patient) Find(ctx context.Context, input repo.FindPatientInput, preload ...string) (*patient.Patient, error) {
	_va := make([]interface{}, len(preload))
	for _i := range preload {
		_va[_i] = preload[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *patient.Patient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindPatientInput, ...string) (*patient.Patient, error)); ok {
		return rf(ctx, input, preload...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindPatientInput, ...string) *patient.Patient); ok {
		r0 = rf(ctx, input, preload...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*patient.Patient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.FindPatientInput, ...string) error); ok {
		r1 = rf(ctx, input, preload...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, input
func (_m *Patient) Save(ctx context.Context, input repo.SavePatientInput) (value.ID, error) {
	ret := _m.Called(ctx, input)

	var r0 value.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.SavePatientInput) (value.ID, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.SavePatientInput) value.ID); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(value.ID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.SavePatientInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, input
func (_m *Patient) Update(ctx context.Context, input repo.UpdatePatientInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.UpdatePatientInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPatient interface {
	mock.TestingT
	Cleanup(func())
}

// NewPatient creates a new instance of Patient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPatient(t mockConstructorTestingTNewPatient) *Patient {
	mock := &Patient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
